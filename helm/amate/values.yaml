# amate의 기본 값입니다.
# 이 파일은 YAML 형식입니다.
# 템플릿에 전달할 변수를 선언합니다.
amateFe:
  # 복제 세트 수를 설정합니다. 자세한 내용은 https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/ 를 참고하세요.
  replicaCount: 1
  # 컨테이너 이미지를 설정합니다. 자세한 내용은 https://kubernetes.io/docs/concepts/containers/images/ 를 참고하세요.
  image:
    repository: ajoumate/amate-fe
    tag: latest
    pullPolicy: Always
  # 서비스를 설정하는 섹션입니다. 자세한 내용은 https://kubernetes.io/docs/concepts/services-networking/service/ 를 참고하세요.
  service:
    port: 3000

amateBe:
  # 복제 세트 수를 설정합니다. 자세한 내용은 https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/ 를 참고하세요.
  replicaCount: 1
  image:
    repository: ajoumate/amate-be
    tag: latest
    pullPolicy: Always
  service:
    port: 8080

# 개인 저장소에서 이미지를 가져오기 위한 비밀 정보를 설정합니다. 자세한 내용은 https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/ 를 참고하세요.
imagePullSecrets: []
# 차트 이름을 재정의할 때 사용합니다.
nameOverride: ""
fullnameOverride: ""

# 서비스 계정을 구성하는 섹션입니다. 자세한 내용은 https://kubernetes.io/docs/concepts/security/service-accounts/ 를 참고하세요.
serviceAccount:
  # 서비스 계정을 생성할지 여부를 지정합니다.
  create: false

# Pod에 Kubernetes 어노테이션을 설정합니다.
# 자세한 내용은 https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 를 참고하세요.
podAnnotations: {}
# Pod에 Kubernetes 레이블을 설정합니다.
# 자세한 내용은 https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ 를 참고하세요.
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# 인그레스 설정 섹션입니다. 자세한 내용은 https://kubernetes.io/docs/concepts/services-networking/ingress/ 를 참고하세요.
ingress:
  enabled: true
  className: "nginx"
  annotations: 
    nginx.ingress.kubernetes.io/rewrite-target: /
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: mate.ajou.app
      paths:
        - path: /api
          pathType: ImplementationSpecific
          backend:
            serviceName: be
            servicePort: 3000
        - path: /
          pathType: ImplementationSpecific
          backend:
            serviceName: fe
            servicePort: 3000
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # 기본 리소스 설정을 하지 않는 것을 권장하며, 사용자가 직접 선택하도록 합니다.
  # 이렇게 하면 Minikube 같은 리소스가 제한된 환경에서도 차트가 실행될 확률이 높아집니다.
  # 리소스를 지정하려면 아래 주석을 해제하고 적절히 조정한 후, 'resources:' 뒤의 중괄호를 제거하세요.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# 라이브니스 및 레디니스 프로브를 설정합니다. 자세한 내용은 https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ 를 참고하세요.
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# 오토스케일링 설정 섹션입니다. 자세한 내용은 https://kubernetes.io/docs/concepts/workloads/autoscaling/ 를 참고하세요.
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# 출력되는 Deployment 정의에 추가할 볼륨 설정입니다.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# 출력되는 Deployment 정의에 추가할 볼륨 마운트 설정입니다.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
